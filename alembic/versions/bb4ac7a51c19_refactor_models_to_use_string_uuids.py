"""refactor models to use string uuids

Revision ID: bb4ac7a51c19
Revises: 45d8d83c4e9b
Create Date: 2025-10-21 21:43:00.572328

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "bb4ac7a51c19"
down_revision: Union[str, Sequence[str], None] = "45d8d83c4e9b"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # First, drop all foreign key constraints
    op.drop_constraint(op.f("submissions_session_id_fkey"), "submissions", type_="foreignkey")
    op.drop_constraint(op.f("surveys_session_id_fkey"), "surveys", type_="foreignkey")
    op.drop_constraint(op.f("sessions_course_id_fkey"), "sessions", type_="foreignkey")
    op.drop_constraint(op.f("courses_teacher_id_fkey"), "courses", type_="foreignkey")

    # Alter column types to String(36) - start with parent tables first
    op.alter_column(
        "teachers",
        "id",
        existing_type=sa.UUID(),
        type_=sa.String(length=36),
        existing_nullable=False,
    )
    op.alter_column(
        "courses",
        "id",
        existing_type=sa.UUID(),
        type_=sa.String(length=36),
        existing_nullable=False,
    )
    op.alter_column(
        "courses",
        "teacher_id",
        existing_type=sa.UUID(),
        type_=sa.String(length=36),
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "id",
        existing_type=sa.UUID(),
        type_=sa.String(length=36),
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "course_id",
        existing_type=sa.UUID(),
        type_=sa.String(length=36),
        existing_nullable=False,
    )
    op.alter_column(
        "submissions",
        "id",
        existing_type=sa.UUID(),
        type_=sa.String(length=36),
        existing_nullable=False,
    )
    op.alter_column(
        "submissions",
        "session_id",
        existing_type=sa.UUID(),
        type_=sa.String(length=36),
        existing_nullable=False,
    )
    op.alter_column(
        "surveys",
        "id",
        existing_type=sa.UUID(),
        type_=sa.String(length=36),
        existing_nullable=False,
    )
    op.alter_column(
        "surveys",
        "session_id",
        existing_type=sa.UUID(),
        type_=sa.String(length=36),
        existing_nullable=False,
    )

    # Add new columns to sessions
    op.add_column("sessions", sa.Column("started_at", sa.DateTime(timezone=True), nullable=True))
    op.add_column("sessions", sa.Column("closed_at", sa.DateTime(timezone=True), nullable=True))

    # Drop old columns from sessions
    op.drop_column("sessions", "starts_at")
    op.drop_column("sessions", "status")
    op.drop_column("sessions", "ends_at")
    op.drop_column("sessions", "created_at")

    # Recreate foreign key constraints with CASCADE
    op.create_foreign_key(None, "courses", "teachers", ["teacher_id"], ["id"], ondelete="CASCADE")
    op.create_foreign_key(None, "sessions", "courses", ["course_id"], ["id"], ondelete="CASCADE")
    op.create_foreign_key(
        None, "submissions", "sessions", ["session_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(None, "surveys", "sessions", ["session_id"], ["id"], ondelete="CASCADE")

    # Add indexes and constraints
    op.create_index("ix_course_teacher_id", "courses", ["teacher_id"], unique=False)
    op.create_unique_constraint("uq_course_title_per_teacher", "courses", ["teacher_id", "title"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "teachers",
        "id",
        existing_type=sa.String(length=36),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.add_column(
        "sessions",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "sessions",
        sa.Column(
            "ends_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "sessions",
        sa.Column(
            "status",
            postgresql.ENUM("OPEN", "CLOSED", name="sessionstatus"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "sessions",
        sa.Column(
            "starts_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True
        ),
    )
    op.drop_constraint(None, "sessions", type_="foreignkey")
    op.create_foreign_key(
        op.f("sessions_course_id_fkey"), "sessions", "courses", ["course_id"], ["id"]
    )
    op.alter_column(
        "sessions",
        "course_id",
        existing_type=sa.String(length=36),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "sessions",
        "id",
        existing_type=sa.String(length=36),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.drop_column("sessions", "closed_at")
    op.drop_column("sessions", "started_at")
    op.drop_constraint(None, "courses", type_="foreignkey")
    op.create_foreign_key(
        op.f("courses_teacher_id_fkey"), "courses", "teachers", ["teacher_id"], ["id"]
    )
    op.drop_constraint("uq_course_title_per_teacher", "courses", type_="unique")
    op.drop_index("ix_course_teacher_id", table_name="courses")
    op.alter_column(
        "courses",
        "teacher_id",
        existing_type=sa.String(length=36),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "courses",
        "id",
        existing_type=sa.String(length=36),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    # ### end Alembic commands ###
