"""Add student authentication and update submission model

Revision ID: 80f87c814130
Revises: add_total_scores_to_submissions
Create Date: 2025-10-23 13:05:39.963977

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "80f87c814130"
down_revision: Union[str, Sequence[str], None] = "add_total_scores_to_submissions"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Create students table
    op.create_table(
        "students",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password_hash", sa.String(length=255), nullable=False),
        sa.Column("full_name", sa.String(length=255), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_students_email"), "students", ["email"], unique=True)

    # Add full_name to teachers table
    op.add_column("teachers", sa.Column("full_name", sa.String(length=255), nullable=True))

    # Add new columns to submissions table
    op.add_column("submissions", sa.Column("student_id", sa.String(length=36), nullable=True))
    op.add_column("submissions", sa.Column("guest_name", sa.String(length=255), nullable=True))
    op.add_column("submissions", sa.Column("status", sa.String(length=20), nullable=True))
    op.add_column("submissions", sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True))

    # Migrate existing data: student_name -> guest_name
    op.execute("UPDATE submissions SET guest_name = student_name")

    # Set default status for existing submissions
    op.execute("UPDATE submissions SET status = 'completed' WHERE status IS NULL")

    # Make guest_name and status NOT NULL after data migration
    op.alter_column("submissions", "guest_name", nullable=False)
    op.alter_column("submissions", "status", nullable=False)

    # Drop old unique constraint and create new ones
    op.drop_constraint(op.f("uq_session_student"), "submissions", type_="unique")
    op.create_unique_constraint("uq_session_student", "submissions", ["session_id", "student_id"])
    op.create_unique_constraint("uq_session_guest", "submissions", ["session_id", "guest_name"])

    # Add foreign key constraint
    op.create_foreign_key(
        None, "submissions", "students", ["student_id"], ["id"], ondelete="CASCADE"
    )

    # Add check constraint for student_id or guest_name
    op.create_check_constraint(
        "ck_submission_student_or_guest",
        "submissions",
        "(student_id IS NOT NULL AND guest_name IS NULL) OR "
        "(student_id IS NULL AND guest_name IS NOT NULL)",
    )

    # Drop old student_name column
    op.drop_column("submissions", "student_name")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("teachers", "full_name")
    op.add_column(
        "submissions", sa.Column("student_name", sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    op.drop_constraint(None, "submissions", type_="foreignkey")
    op.drop_constraint("uq_session_guest", "submissions", type_="unique")
    op.drop_constraint("uq_session_student", "submissions", type_="unique")
    op.create_unique_constraint(
        op.f("uq_session_student"),
        "submissions",
        ["session_id", "student_name"],
        postgresql_nulls_not_distinct=False,
    )
    op.drop_column("submissions", "updated_at")
    op.drop_column("submissions", "status")
    op.drop_column("submissions", "guest_name")
    op.drop_column("submissions", "student_id")
    op.drop_index(op.f("ix_students_email"), table_name="students")
    op.drop_table("students")
    # ### end Alembic commands ###
